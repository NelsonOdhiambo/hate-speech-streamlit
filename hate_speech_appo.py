# -*- coding: utf-8 -*-
"""hate_speech_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N1KWMN4IdQ5QvmQ1A4I4KqcKjvb2Br48
"""

import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

st.title("ðŸ“Š Hate Speech Detection Dashboard")

st.sidebar.header("Upload & Train Model")




uploaded_file = st.sidebar.file_uploader("Upload CSV (with 'text' and 'label' columns)", type=["csv"])

if uploaded_file:
    try:
        # First try UTF-8
        df = pd.read_csv(uploaded_file, encoding="utf-8")
    except UnicodeDecodeError:
        try:
            # Fallback: UTF-8 with BOM
            df = pd.read_csv(uploaded_file, encoding="utf-8-sig")
        except UnicodeDecodeError:
            # Last fallback: Latin-1 (ISO-8859-1, works for many Windows CSVs)
            df = pd.read_csv(uploaded_file, encoding="latin1")

    st.write("### Dataset Preview", df.head())








    # Train-test split
    X = df["text"].astype(str)
    y = df["label"]

    vectorizer = TfidfVectorizer(stop_words="english", max_features=5000)
    X_vec = vectorizer.fit_transform(X)

    X_train, X_test, y_train, y_test = train_test_split(X_vec, y, test_size=0.2, random_state=42)

    model = LogisticRegression(max_iter=200)
    model.fit(X_train, y_train)

    # Evaluate
    y_pred = model.predict(X_test)
    report = classification_report(y_test, y_pred, output_dict=True)
    st.write("### Model Performance", pd.DataFrame(report).transpose())

    # Confusion Matrix
    cm = confusion_matrix(y_test, y_pred, labels=model.classes_)
    fig, ax = plt.subplots()
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=model.classes_, yticklabels=model.classes_, ax=ax)
    plt.xlabel("Predicted")
    plt.ylabel("True")
    st.pyplot(fig)

    # Single text prediction
    st.write("## Try it Out")
    user_input = st.text_area("Enter text to classify:")
    if st.button("Classify"):
        if user_input.strip():
            vec_input = vectorizer.transform([user_input])
            prediction = model.predict(vec_input)[0]
            st.success(f"Prediction: **{prediction}**")
        else:
            st.warning("Please enter some text.")

    # Batch prediction
    batch_file = st.file_uploader("Upload another CSV for batch classification", type=["csv"])
    if batch_file:
        new_df = pd.read_csv(batch_file)
        if "text" in new_df.columns:
            new_vec = vectorizer.transform(new_df["text"].astype(str))
            new_df["prediction"] = model.predict(new_vec)
            st.write("### Batch Predictions", new_df.head())
            st.download_button("Download Predictions", new_df.to_csv(index=False), "predictions.csv")