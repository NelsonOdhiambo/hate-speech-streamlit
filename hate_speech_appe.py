# -*- coding: utf-8 -*-
"""hate_speech_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N1KWMN4IdQ5QvmQ1A4I4KqcKjvb2Br48
"""

import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

st.title("üìù Hate Speech Detection App")
st.write("Upload a CSV dataset or enter text to classify as **Hate**, **Offensive**, or **Neither**.")

# --- File upload ---
uploaded_file = st.sidebar.file_uploader("Upload CSV (must have 'text' and 'label' columns)", type=["csv"])

if uploaded_file:
    try:
        df = pd.read_csv(uploaded_file, encoding="utf-8")
    except UnicodeDecodeError:
        try:
            df = pd.read_csv(uploaded_file, encoding="utf-8-sig")
        except UnicodeDecodeError:
            df = pd.read_csv(uploaded_file, encoding="latin1")

    # Debug: show detected columns
    st.write("### Columns detected:", list(df.columns))

    # Normalize column names
    df.columns = [c.strip().lower().replace("\ufeff", "") for c in df.columns]

    # Preview
    st.write("### Dataset Preview", df.head())

    # Check required columns
    if "text" in df.columns and "label" in df.columns:
        X = df["text"].astype(str)
        y = df["label"].astype(str)

        # Split dataset
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Vectorize
        vectorizer = TfidfVectorizer(stop_words="english", max_features=5000)
        X_train_vec = vectorizer.fit_transform(X_train)
        X_test_vec = vectorizer.transform(X_test)

        # Train model
        model = LogisticRegression(max_iter=1000)
        model.fit(X_train_vec, y_train)

        # Evaluate
        y_pred = model.predict(X_test_vec)
        st.text("### Model Evaluation Report")
        st.text(classification_report(y_test, y_pred))

        # Confusion matrix
        cm = confusion_matrix(y_test, y_pred, labels=model.classes_)
        fig, ax = plt.subplots()
        sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=model.classes_, yticklabels=model.classes_, ax=ax)
        ax.set_xlabel("Predicted")
        ax.set_ylabel("Actual")
        st.pyplot(fig)

        # --- Text classification input ---
        st.subheader("üîé Test the Model")
        user_input = st.text_area("Enter text to classify")
        if st.button("Classify"):
            if user_input.strip():
                input_vec = vectorizer.transform([user_input])
                prediction = model.predict(input_vec)[0]
                st.success(f"**Prediction:** {prediction}")
            else:
                st.warning("Please enter some text.")
    else:
        st.error(f"‚ùå Your dataset must contain 'text' and 'label' columns. Found: {list(df.columns)}")